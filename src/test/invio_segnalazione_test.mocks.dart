// Mocks generated by Mockito 5.4.4 from annotations
// in civiconnect/test/invio_segnalazione_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i9;

import 'package:civiconnect/gestione_segnalazione_cittadino/gestione_segnalazione_cittadino_controller.dart'
    as _i5;
import 'package:civiconnect/model/report_model.dart' as _i7;
import 'package:civiconnect/model/users_model.dart' as _i3;
import 'package:civiconnect/utils/report_status_priority.dart' as _i10;
import 'package:cloud_firestore/cloud_firestore.dart' as _i8;
import 'package:flutter/material.dart' as _i2;
import 'package:image_picker/image_picker.dart' as _i11;
import 'package:image_picker_platform_interface/image_picker_platform_interface.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWidget_0 extends _i1.SmartFake implements _i2.Widget {
  _FakeWidget_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeCitizen_1 extends _i1.SmartFake implements _i3.Citizen {
  _FakeCitizen_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLostDataResponse_2 extends _i1.SmartFake
    implements _i4.LostDataResponse {
  _FakeLostDataResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CitizenReportManagementController].
///
/// See the documentation for Mockito's code generation for more information.
class MockCitizenReportManagementController extends _i1.Mock
    implements _i5.CitizenReportManagementController {
  MockCitizenReportManagementController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Widget get redirectPage => (super.noSuchMethod(
        Invocation.getter(#redirectPage),
        returnValue: _FakeWidget_0(
          this,
          Invocation.getter(#redirectPage),
        ),
      ) as _i2.Widget);

  @override
  _i6.Future<_i3.Citizen> get citizen => (super.noSuchMethod(
        Invocation.getter(#citizen),
        returnValue: _i6.Future<_i3.Citizen>.value(_FakeCitizen_1(
          this,
          Invocation.getter(#citizen),
        )),
      ) as _i6.Future<_i3.Citizen>);

  @override
  _i6.Future<bool> addReport(
    _i2.BuildContext? context, {
    required String? citta,
    required String? titolo,
    required String? descrizione,
    required _i7.Category? categoria,
    required _i8.GeoPoint? location,
    Map<String, String>? indirizzo,
    _i9.File? photo,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addReport,
          [context],
          {
            #citta: citta,
            #titolo: titolo,
            #descrizione: descrizione,
            #categoria: categoria,
            #location: location,
            #indirizzo: indirizzo,
            #photo: photo,
          },
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<List<Map<String, dynamic>>?> getUserReports(
          {bool? reset = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserReports,
          [],
          {#reset: reset},
        ),
        returnValue: _i6.Future<List<Map<String, dynamic>>?>.value(),
      ) as _i6.Future<List<Map<String, dynamic>>?>);

  @override
  _i6.Future<List<String>> getBadWords() => (super.noSuchMethod(
        Invocation.method(
          #getBadWords,
          [],
        ),
        returnValue: _i6.Future<List<String>>.value(<String>[]),
      ) as _i6.Future<List<String>>);

  @override
  bool containsBadWords(
    String? text,
    List<String>? badWords,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #containsBadWords,
          [
            text,
            badWords,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<List<Map<String, dynamic>>?> getMyReports({bool? reset = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMyReports,
          [],
          {#reset: reset},
        ),
        returnValue: _i6.Future<List<Map<String, dynamic>>?>.value(),
      ) as _i6.Future<List<Map<String, dynamic>>?>);

  @override
  _i6.Future<List<Map<String, dynamic>>?> filterReportsBy({
    required String? city,
    List<_i10.StatusReport>? status,
    List<_i10.PriorityReport>? priority,
    List<_i7.Category>? category,
    _i2.DateTimeRange? dateRange,
    String? keyword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterReportsBy,
          [],
          {
            #city: city,
            #status: status,
            #priority: priority,
            #category: category,
            #dateRange: dateRange,
            #keyword: keyword,
          },
        ),
        returnValue: _i6.Future<List<Map<String, dynamic>>?>.value(),
      ) as _i6.Future<List<Map<String, dynamic>>?>);
}

/// A class which mocks [ImagePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePicker extends _i1.Mock implements _i11.ImagePicker {
  MockImagePicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.XFile?> pickImage({
    required _i4.ImageSource? source,
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    _i4.CameraDevice? preferredCameraDevice = _i4.CameraDevice.rear,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickImage,
          [],
          {
            #source: source,
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #preferredCameraDevice: preferredCameraDevice,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i6.Future<_i4.XFile?>.value(),
      ) as _i6.Future<_i4.XFile?>);

  @override
  _i6.Future<List<_i4.XFile>> pickMultiImage({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    int? limit,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultiImage,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #limit: limit,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i6.Future<List<_i4.XFile>>.value(<_i4.XFile>[]),
      ) as _i6.Future<List<_i4.XFile>>);

  @override
  _i6.Future<_i4.XFile?> pickMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMedia,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i6.Future<_i4.XFile?>.value(),
      ) as _i6.Future<_i4.XFile?>);

  @override
  _i6.Future<List<_i4.XFile>> pickMultipleMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    int? limit,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultipleMedia,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #limit: limit,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i6.Future<List<_i4.XFile>>.value(<_i4.XFile>[]),
      ) as _i6.Future<List<_i4.XFile>>);

  @override
  _i6.Future<_i4.XFile?> pickVideo({
    required _i4.ImageSource? source,
    _i4.CameraDevice? preferredCameraDevice = _i4.CameraDevice.rear,
    Duration? maxDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickVideo,
          [],
          {
            #source: source,
            #preferredCameraDevice: preferredCameraDevice,
            #maxDuration: maxDuration,
          },
        ),
        returnValue: _i6.Future<_i4.XFile?>.value(),
      ) as _i6.Future<_i4.XFile?>);

  @override
  _i6.Future<_i4.LostDataResponse> retrieveLostData() => (super.noSuchMethod(
        Invocation.method(
          #retrieveLostData,
          [],
        ),
        returnValue:
            _i6.Future<_i4.LostDataResponse>.value(_FakeLostDataResponse_2(
          this,
          Invocation.method(
            #retrieveLostData,
            [],
          ),
        )),
      ) as _i6.Future<_i4.LostDataResponse>);

  @override
  bool supportsImageSource(_i4.ImageSource? source) => (super.noSuchMethod(
        Invocation.method(
          #supportsImageSource,
          [source],
        ),
        returnValue: false,
      ) as bool);
}
